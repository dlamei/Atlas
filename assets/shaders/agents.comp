#version 450 core
#define PI 3.1415926535

layout (local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

layout(rgba8) uniform image2D outImg;

struct settingsStruct {
	vec4 color;
	float moveSpeed;
	float turnSpeed;
	float sensorAngle;
	float sensorDistance;
	float sensorSize;
	float randomStrength;
};

struct Agent {
	ivec2 speciesMask;
	vec2 pos;	
	float angle;
	float pad0;
};

layout (std430) buffer settingsBuffer
{
	settingsStruct settings;
};

layout(std430) buffer Agents {
	Agent agents[];
};

uint hash(uint state)
{
	state ^= 2747636419u;
	state *= 2654435769u;
	state ^= state >> 16;
	state *= 2654435769u;
	state ^= state >> 16;
	state *= 2654435769u;
	return state;
}

float uintToRange01(uint state)
{
	float res = state / 4294967295.f;
	return res;
}

float senseTrail(Agent agent, float sensorAngleOffset, float sensorDistance)
{
	ivec2 imgSize = imageSize(outImg);

	float sensorAngle = agent.angle + sensorAngleOffset;

	int sensorCenterX = int(agent.pos.x + cos(sensorAngle) * sensorDistance);
	int sensorCenterY = int(agent.pos.y + sin(sensorAngle) * sensorDistance);

	int sensorSize = int(settings.sensorSize / 2);

	ivec4 senseWeight = ivec4(agent.speciesMask, 0, 0) * 2 - 1;

	float senseSum=0;
	for (int offsetX = -sensorSize; offsetX <= sensorSize; offsetX++)
	{
		for (int offsetY = -sensorSize; offsetY <= sensorSize; offsetY++)
		{
			int sampleX = min(imgSize.x-1, max(0, sensorCenterX+offsetX));
			int sampleY = min(imgSize.y-1, max(0, sensorCenterY+offsetY));

			senseSum += dot(imageLoad(outImg, ivec2(sampleX, sampleY)).rgba, senseWeight);
		}
	}

	return senseSum;
}

void main()
{

	ivec2 imgSize = imageSize(outImg);
	int width = imgSize.x;
	int height = imgSize.y;

	float moveSpeed = settings.moveSpeed;
	float turnSpeed = settings.turnSpeed;

	float agentSensorAngleOffset = settings.sensorAngle;
	float sensorDistance = settings.sensorDistance;


	ivec2 id = ivec2(gl_GlobalInvocationID.xy);

	if (id.x > agents.length())
	{
		return;
	}

	Agent cAgent = agents[id.x];

	uint random = hash(int(cAgent.pos.y * width + cAgent.pos.x) + hash(int(id.x * 824941)));

	float senseForward = senseTrail(cAgent, 0, sensorDistance);
	float senseLeft = senseTrail(cAgent, agentSensorAngleOffset, sensorDistance);
	float senseRight = senseTrail(cAgent, -agentSensorAngleOffset, sensorDistance);

	float randomSteerStrength = uintToRange01(hash(random)) * settings.randomStrength;

	if (senseForward == 0 && senseRight == 0 && senseLeft == 0)
	{
		cAgent.angle += (randomSteerStrength-0.5) * 2 * turnSpeed;
	}
	else if(senseForward > senseLeft && senseForward > senseRight)
	{
		cAgent.angle += 0;
	}
	else if (senseForward < senseLeft && senseForward < senseRight)
	{
		cAgent.angle += (randomSteerStrength-0.5) * 2 * turnSpeed;
	}
	else if (senseLeft > senseRight)
	{
		cAgent.angle += (randomSteerStrength * turnSpeed);
	}
	else if (senseLeft < senseRight)
	{
		cAgent.angle -= (randomSteerStrength * turnSpeed);
	}
	else
	{
		cAgent.angle += (randomSteerStrength-0.5) * 2 * turnSpeed;
	}


	cAgent.pos.x += moveSpeed * cos(cAgent.angle);
	cAgent.pos.y += moveSpeed * sin(cAgent.angle);

	if (cAgent.pos.x <= 0 || cAgent.pos.x >= width || cAgent.pos.y <= 0 || cAgent.pos.y >= height)
	{
		uint random = hash(random);
		float randomAngle = uintToRange01(random) * 2 * PI;

		cAgent.pos.x = min(width-1, max(0, cAgent.pos.x));
		cAgent.pos.y = min(height-1, max(0, cAgent.pos.y));
		cAgent.angle = randomAngle;
	}

	agents[id.x] = cAgent;


	ivec4 speciesColor = ivec4(cAgent.speciesMask, 0, 1);
	imageStore(outImg, ivec2(cAgent.pos.x, cAgent.pos.y), speciesColor);
}

